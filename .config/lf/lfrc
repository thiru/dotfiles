# # Lf Config
# -----------------------------------------------------------------------------

# ## Settings
# {{{ -------------------------------------------------------------------------

# interpreter for shell commands
set shell bash

# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10

set incsearch true

# }}} -------------------------------------------------------------------------



# ## Custom Commands
# {{{ -------------------------------------------------------------------------

# bulk rename
cmd vidir $vidir "$f"

# delete file/folder (permanently)
cmd delete ${{
    set -f
    printf "$fx\n"
    printf "delete?[y/n]"
    read -n1 ans
    [ $ans = "y" ] && rm -rf $fx
}}

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# play media recursively
cmd mpv $mpv ./**

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open ${{
    case $(file --mime-type "$f" -bL) in
        text/*|application/json) $EDITOR "$f";;
        *) xdg-open "$f" ;;
    esac
}}

# rename file/folder without prompt for overwrite
cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1

# shred paths
cmd shred $bleachbit --shred "$f"

# compress file as tar.gz
cmd targz %tar cvzf "$f.tar.gz" "$f"

# permanently delete file
cmd fdelete %set -f; rm -rf $fx; echo "deleted $(basename $fx)"

# compress current file or selected files with zip
cmd zip %zip -r "$f" "$f"

# image viewer
cmd imv $imv -f -d -x -s full -r . &

# }}} -------------------------------------------------------------------------



# ## Mappings
# {{{ -------------------------------------------------------------------------

# toggle hidden files/dirs
map . set hidden!

# use enter for shell commands
map <enter> shell

# bulk rename
map b vidir

# execute current file (must be executable)
map x $$f
map X !$f

# dedicated keys for file opener actions
map o &mimeopen $f
map O $mimeopen --ask $f

# rename file/folder
map r push :rename<space>

# deleting
map T fdelete
map t delete

# archiving/unarchiving
map az zip
map at targz
map ae extract

# imv
map P imv

# mpv (recursive)
map V mpv

# shred paths
map B shred

# }}} -------------------------------------------------------------------------

